{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "\n<p>PlanetScale API</p>\n&copy; 2023 PlanetScale, Inc.",
    "title": "PlanetScale API",
    "version": "v1",
    "x-copyright": "&copy; 2023 PlanetScale, Inc."
  },
  "host": "api.planetscale.com",
  "basePath": "/v1",
  "paths": {
    "/organizations": {
      "get": {
        "description": "When using a service token, returns the list of organizations the service token has access to. When using an OAuth token, returns the list of organizations the user has access to.\n### Authorization\nA   OAuth token must have at least one of the following   scopes in order to use this API endpoint:\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| User | `read_organizations` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Organizations"
        ],
        "summary": "List organizations",
        "operationId": "list-organizations",
        "parameters": [
          {
            "type": "number",
            "default": 1,
            "description": "If provided, specifies the page offset of returned results",
            "name": "page",
            "in": "query"
          },
          {
            "type": "number",
            "default": 25,
            "description": "If provided, specifies the number of returned results",
            "name": "per_page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Gets the organizations for the current user",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/organization"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/organizations/{name}": {
      "get": {
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_organization`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| User | `read_organizations` |\n| Organization | `read_organization` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Organizations"
        ],
        "summary": "Get an organization",
        "operationId": "get-an-organization",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the organization",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an organization",
            "schema": {
              "$ref": "#/definitions/organization"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "description": "\n### Authorization\nA   OAuth token must have at least one of the following   scopes in order to use this API endpoint:\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `write_organization` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Organizations"
        ],
        "summary": "Update an organization",
        "operationId": "update-an-organization",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the organization",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "billing_email": {
                  "description": "The billing email for the organization",
                  "type": "string"
                },
                "idp_managed_roles": {
                  "description": "Whether or not the IdP provider is be responsible for managing roles in PlanetScale",
                  "type": "boolean"
                },
                "require_admin_for_production_access": {
                  "description": "Whether or not only admins can access production",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated organization",
            "schema": {
              "$ref": "#/definitions/organization"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/organizations/{name}/regions": {
      "get": {
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_organization`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| User | `read_organizations` |\n| Organization | `read_organization` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Organizations"
        ],
        "summary": "List regions for an organization",
        "operationId": "list-regions-for-an-organization",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the organization",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "default": 1,
            "description": "If provided, specifies the page offset of returned results",
            "name": "page",
            "in": "query"
          },
          {
            "type": "number",
            "default": 25,
            "description": "If provided, specifies the number of returned results",
            "name": "per_page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the organization's regions",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/region"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/organizations/{organization}/databases": {
      "get": {
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_database`, `delete_database`, `write_database`, `read_branch`, `delete_branch`, `create_branch`, `delete_production_branch`, `connect_branch`, `connect_production_branch`, `delete_branch_password`, `delete_production_branch_password`, `read_deploy_request`, `create_deploy_request`, `approve_deploy_request`, `read_comment`, `create_comment`, `restore_backup`, `restore_production_branch_backup`, `read_backups`, `write_backups`, `delete_backups`, `delete_production_branch_backups`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_databases` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Databases"
        ],
        "summary": "List databases",
        "operationId": "list-databases",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the organization the database belongs to",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "default": 1,
            "description": "If provided, specifies the page offset of returned results",
            "name": "page",
            "in": "query"
          },
          {
            "type": "number",
            "default": 25,
            "description": "If provided, specifies the number of returned results",
            "name": "per_page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieves the databases for an organization",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/database"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `create_databases`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `create_databases` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Databases"
        ],
        "summary": "Create a database",
        "operationId": "create-a-database",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the organization the database belongs to",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "cluster_size": {
                  "description": "The database cluster size. This is required for Scaler Pro databases. Options: PS_10, PS_20, PS_40, PS_80, PS_160, PS_320, PS_400, PS_640, PS_700, PS_900, PS_1280, PS_1400, PS_1800, PS_2100, PS_2560, PS_2700, PS_2800.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the database",
                  "type": "string"
                },
                "notes": {
                  "description": "Notes about the database",
                  "type": "string"
                },
                "plan": {
                  "description": "The database billing plan. Options: 'hobby', 'scaler', or 'scaler_pro'.",
                  "type": "string"
                },
                "region": {
                  "description": "The region the database will be deployed in. If left blank, defaults to the organization's default region.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the created database",
            "schema": {
              "$ref": "#/definitions/database"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/branches": {
      "get": {
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_branches` |\n| Database | `read_branches` |\n| Branch | `read_branch` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Database branches"
        ],
        "summary": "List branches",
        "operationId": "list-branches",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the database the branch belongs to",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the organization the branch belongs to",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "default": 1,
            "description": "If provided, specifies the page offset of returned results",
            "name": "page",
            "in": "query"
          },
          {
            "type": "number",
            "default": 25,
            "description": "If provided, specifies the number of returned results",
            "name": "per_page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns database branches",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/branch"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `create_branch`, `restore_production_branch_backup`, `restore_backup`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `write_branches`, `restore_production_branch_backups`, `restore_backups` |\n| Database | `write_branches`, `restore_production_branch_backups`, `restore_backups` |\n| Branch | `restore_backups` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Database branches"
        ],
        "summary": "Create a branch",
        "operationId": "create-a-branch",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the database the branch belongs to",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the organization the branch belongs to",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "name",
                "parent_branch"
              ],
              "properties": {
                "backup_id": {
                  "description": "If provided, restores the backup's schema and data to the new branch. Must have `restore_production_branch_backup(s)` or `restore_backup(s)` access to do this.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the branch",
                  "type": "string"
                },
                "parent_branch": {
                  "description": "Parent branch",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the created branch",
            "schema": {
              "$ref": "#/definitions/branch"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/branches/{branch}/backups": {
      "get": {
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_backups`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_backups` |\n| Database | `read_backups` |\n| Branch | `read_backups` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Backups"
        ],
        "summary": "List backups",
        "operationId": "list-backups",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the branch",
            "name": "branch",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the database the branch belongs to",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the organization the branch belongs to",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "default": 1,
            "description": "If provided, specifies the page offset of returned results",
            "name": "page",
            "in": "query"
          },
          {
            "type": "number",
            "default": 25,
            "description": "If provided, specifies the number of returned results",
            "name": "per_page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns database branch backups",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/backup"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `write_backups`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `write_backups` |\n| Database | `write_backups` |\n| Branch | `write_backups` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Backups"
        ],
        "summary": "Create a backup",
        "operationId": "create-a-backup",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the branch",
            "name": "branch",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the database the branch belongs to",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the organization the branch belongs to",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "description": "Name for the backup",
                  "type": "string"
                },
                "retention_unit": {
                  "description": "Unit for the retention period of the backup",
                  "type": "string",
                  "enum": [
                    "hour",
                    "day",
                    "week",
                    "month",
                    "year"
                  ]
                },
                "retention_value": {
                  "description": "Value between `1`` and `1000`` for the retention period of the backup (i.e retention_value `6`` and retention_unit `hour` means 6 hours)",
                  "type": "number"
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the created database branch backup",
            "schema": {
              "$ref": "#/definitions/backup"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/branches/{branch}/backups/{id}": {
      "get": {
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_backups`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_backups` |\n| Database | `read_backups` |\n| Branch | `read_backups` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Backups"
        ],
        "summary": "Get a backup",
        "operationId": "get-a-backup",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the branch",
            "name": "branch",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the database the branch belongs to",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the organization the branch belongs to",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The ID for the backup",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a database branch backup",
            "schema": {
              "$ref": "#/definitions/backup"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `delete_backups`, `delete_production_branch_backups`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `delete_backups`, `delete_production_branch_backups` |\n| Database | `delete_backups`, `delete_production_branch_backups` |\n| Branch | `delete_backups` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Backups"
        ],
        "summary": "Delete a backup",
        "operationId": "delete-a-backup",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the branch",
            "name": "branch",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the database the branch belongs to",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the organization the branch belongs to",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The ID of the backup",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a backup"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/branches/{branch}/passwords": {
      "get": {
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `manage_passwords`, `manage_production_branch_passwords` |\n| Database | `manage_passwords`, `manage_production_branch_passwords` |\n| Branch | `manage_passwords` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Database branch passwords"
        ],
        "summary": "List passwords",
        "operationId": "list-passwords",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the branch the password belongs to",
            "name": "branch",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the database the password belongs to",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the organization the password belongs to",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "A read-only region of the database branch. If present, the password results will be filtered to only those in the region",
            "name": "read_only_region_id",
            "in": "query"
          },
          {
            "type": "number",
            "default": 1,
            "description": "If provided, specifies the page offset of returned results",
            "name": "page",
            "in": "query"
          },
          {
            "type": "number",
            "default": 25,
            "description": "If provided, specifies the number of returned results",
            "name": "per_page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Gets the passwords for the database branch",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/password"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `connect_production_branch`, `create_branch_password`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `manage_passwords`, `manage_production_branch_passwords` |\n| Database | `manage_passwords`, `manage_production_branch_passwords` |\n| Branch | `manage_passwords` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Database branch passwords"
        ],
        "summary": "Create a password",
        "operationId": "create-a-password",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the branch the password belongs to",
            "name": "branch",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the database the password belongs to",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the organization the password belongs to",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "description": "Optional name of the password",
                  "type": "string"
                },
                "role": {
                  "description": "The database role of the password (i.e. admin)",
                  "type": "string",
                  "enum": [
                    "reader",
                    "writer",
                    "admin",
                    "readwriter"
                  ]
                },
                "ttl": {
                  "description": "Time to live (in seconds) for the password. The password will be invalid when TTL has passed",
                  "type": "number"
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Creates a password",
            "schema": {
              "$ref": "#/definitions/password_with_plaintext"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Content"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/branches/{branch}/passwords/{id}": {
      "get": {
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `manage_passwords`, `manage_production_branch_passwords` |\n| Database | `manage_passwords`, `manage_production_branch_passwords` |\n| Branch | `manage_passwords` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Database branch passwords"
        ],
        "summary": "Get a password",
        "operationId": "get-a-password",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the password",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the branch the password belongs to",
            "name": "branch",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the database the password belongs to",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the organization the password belongs to",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "A read-only region of the database branch. If present, the password results will be filtered to only those in the region",
            "name": "read_only_region_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Gets the password",
            "schema": {
              "$ref": "#/definitions/password"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `delete_production_branch_password`, `delete_branch_password`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `manage_passwords`, `manage_production_branch_passwords` |\n| Database | `manage_passwords`, `manage_production_branch_passwords` |\n| Branch | `manage_passwords` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Database branch passwords"
        ],
        "summary": "Delete a password",
        "operationId": "delete-a-password",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the password",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the branch the password belongs to",
            "name": "branch",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the database the password belongs to",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the organization the password belongs to",
            "name": "organization",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Deletes the password"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `connect_production_branch`, `create_branch_password`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `manage_passwords`, `manage_production_branch_passwords` |\n| Database | `manage_passwords`, `manage_production_branch_passwords` |\n| Branch | `manage_passwords` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Database branch passwords"
        ],
        "summary": "Update a password",
        "operationId": "update-a-password",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the password",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the branch the password belongs to",
            "name": "branch",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the database the password belongs to",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the organization the password belongs to",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "The name for the password",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updates a password",
            "schema": {
              "$ref": "#/definitions/password"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/branches/{branch}/passwords/{id}/renew": {
      "post": {
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `connect_production_branch`, `create_branch_password`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `manage_passwords`, `manage_production_branch_passwords` |\n| Database | `manage_passwords`, `manage_production_branch_passwords` |\n| Branch | `manage_passwords` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Database branch passwords"
        ],
        "summary": "Renew a password",
        "operationId": "renew-a-password",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the password",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the branch the password belongs to",
            "name": "branch",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the database the password belongs to",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the organization the password belongs to",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "read_only_region_id": {
                  "description": "A read-only region of the database branch. If present, the password results will be filtered to only those in the region",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updates a password",
            "schema": {
              "$ref": "#/definitions/password_with_plaintext"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/branches/{name}": {
      "get": {
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_branches` |\n| Database | `read_branches` |\n| Branch | `read_branch` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Database branches"
        ],
        "summary": "Get a branch",
        "operationId": "get-a-branch",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the branch",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the database the branch belongs to",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the organization the branch belongs to",
            "name": "organization",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns information about a branch",
            "schema": {
              "$ref": "#/definitions/branch"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `delete_branch`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `delete_branches`, `delete_production_branches` |\n| Database | `delete_branches`, `delete_production_branches` |\n| Branch | `delete_branch` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Database branches"
        ],
        "summary": "Delete a branch",
        "operationId": "delete-a-branch",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the branch",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the database the branch belongs to",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the organization the branch belongs to",
            "name": "organization",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a branch"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/branches/{name}/demote": {
      "post": {
        "description": "Demotes a branch from production to development\n### Authorization\nA   OAuth token must have at least one of the following   scopes in order to use this API endpoint:\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `demote_branches` |\n| Database | `demote_branches` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Database branches"
        ],
        "summary": "Demote a branch",
        "operationId": "demote-a-branch",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the branch",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the database the branch belongs to",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the organization the branch belongs to",
            "name": "organization",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a development branch",
            "schema": {
              "$ref": "#/definitions/branch"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/branches/{name}/promote": {
      "post": {
        "description": "Promotes a branch from development to production\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `connect_production_branch`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `promote_branches` |\n| Database | `promote_branches` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Database branches"
        ],
        "summary": "Promote a branch",
        "operationId": "promote-a-branch",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the branch",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the database the branch belongs to",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the organization the branch belongs to",
            "name": "organization",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a production branch",
            "schema": {
              "$ref": "#/definitions/branch"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/branches/{name}/safe-migrations": {
      "post": {
        "description": "\n",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Database branches"
        ],
        "summary": "Enable safe migrations for a branch",
        "operationId": "enable-safe-migrations-for-a-branch",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the branch",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the database the branch belongs to",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the organization the branch belongs to",
            "name": "organization",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the branch with safe migrations enabled",
            "schema": {
              "$ref": "#/definitions/branch"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "description": "\n",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Database branches"
        ],
        "summary": "Disable safe migrations for a branch",
        "operationId": "disable-safe-migrations-for-a-branch",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the branch",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the database the branch belongs to",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the organization the branch belongs to",
            "name": "organization",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the branch with safe migrations disabled",
            "schema": {
              "$ref": "#/definitions/branch"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/branches/{name}/schema": {
      "get": {
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_branches` |\n| Database | `read_branches` |\n| Branch | `read_branch` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Database branches"
        ],
        "summary": "Get a branch schema",
        "operationId": "get-a-branch-schema",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the branch",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the database the branch belongs to",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the organization the branch belongs to",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "If provided, the schema for this keyspace is returned",
            "name": "keyspace",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Gets the schema for the branch",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/table_schema"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/branches/{name}/schema/lint": {
      "get": {
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_branches` |\n| Database | `read_branches` |\n| Branch | `read_branch` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Database branches"
        ],
        "summary": "Lint a branch schema",
        "operationId": "lint-a-branch-schema",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the branch",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the database the branch belongs to",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the organization the branch belongs to",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "default": 1,
            "description": "If provided, specifies the page offset of returned results",
            "name": "page",
            "in": "query"
          },
          {
            "type": "number",
            "default": 25,
            "description": "If provided, specifies the number of returned results",
            "name": "per_page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of schema errors for a branch",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/lint_error"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-queue": {
      "get": {
        "description": "The deploy queue returns the current list of deploy requests in the order they will be deployed.\n",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Deploy requests"
        ],
        "summary": "Get the deploy queue",
        "operationId": "get-the-deploy-queue",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the deploy request's database",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the deploy request's organization",
            "name": "organization",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the deploy queue for a database",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/queued_deploy_request"
                  }
                }
              },
              "additionalProperties": false
            }
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-requests": {
      "get": {
        "description": "List deploy requests for a database\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_deploy_requests` |\n| Database | `read_deploy_requests` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Deploy requests"
        ],
        "summary": "List deploy requests",
        "operationId": "list-deploy-requests",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the deploy request's database",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the deploy request's organization",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "default": 1,
            "description": "If provided, specifies the page offset of returned results",
            "name": "page",
            "in": "query"
          },
          {
            "type": "number",
            "default": 25,
            "description": "If provided, specifies the number of returned results",
            "name": "per_page",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by state of the deploy request (open, closed, deployed)",
            "name": "state",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by the name of the branch the deploy request is created from",
            "name": "branch",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by the name of the branch the deploy request will be merged into",
            "name": "into_branch",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of deploy requests for a database",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/deploy_request"
                  }
                }
              },
              "additionalProperties": false
            }
          }
        }
      },
      "post": {
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`, `create_deploy_requests`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `write_deploy_requests` |\n| Database | `write_deploy_requests` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Deploy requests"
        ],
        "summary": "Create a deploy request",
        "operationId": "create-a-deploy-request",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the deploy request's database",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the deploy request's organization",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "branch": {
                  "description": "The name of the branch the deploy request is created from",
                  "type": "string"
                },
                "into_branch": {
                  "description": "The name of the branch the deploy request will be merged into",
                  "type": "string"
                },
                "notes": {
                  "description": "Notes about the deploy request",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the created deploy request",
            "schema": {
              "$ref": "#/definitions/deploy_request_with_deployment"
            }
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-requests/{number}": {
      "get": {
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_deploy_requests` |\n| Database | `read_deploy_requests` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Deploy requests"
        ],
        "summary": "Get a deploy request",
        "operationId": "get-a-deploy-request",
        "parameters": [
          {
            "type": "string",
            "description": "The number of the deploy request",
            "name": "number",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the deploy request's database",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the deploy request's organization",
            "name": "organization",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns information about a deploy request",
            "schema": {
              "$ref": "#/definitions/deploy_request_with_deployment"
            }
          }
        }
      },
      "patch": {
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `write_deploy_requests` |\n| Database | `write_deploy_requests` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Deploy requests"
        ],
        "summary": "Close a deploy request",
        "operationId": "close-a-deploy-request",
        "parameters": [
          {
            "type": "string",
            "description": "The number of the deploy request",
            "name": "number",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the deploy request's database",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the deploy request's organization",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "state": {
                  "description": "The deploy request will be updated to this state",
                  "type": "string",
                  "enum": [
                    "closed"
                  ]
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated deploy request",
            "schema": {
              "$ref": "#/definitions/deploy_request_with_deployment"
            }
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-requests/{number}/apply-deploy": {
      "post": {
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`, `create_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `deploy_deploy_requests` |\n| Database | `deploy_deploy_requests` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Deploy requests"
        ],
        "summary": "Complete a gated deploy request",
        "operationId": "complete-a-gated-deploy-request",
        "parameters": [
          {
            "type": "string",
            "description": "The number of the deploy request",
            "name": "number",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the deploy request's database",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the deploy request's organization",
            "name": "organization",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the deploy request whose deployment has been completed",
            "schema": {
              "$ref": "#/definitions/deploy_request"
            }
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-requests/{number}/auto-apply": {
      "put": {
        "description": "Enables or disabled the auto-apply setting for a deploy request\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`, `create_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `deploy_deploy_requests` |\n| Database | `deploy_deploy_requests` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Deploy requests"
        ],
        "summary": "Update auto-apply for deploy request",
        "operationId": "update-auto-apply-for-deploy-request",
        "parameters": [
          {
            "type": "string",
            "description": "The number of the deploy request",
            "name": "number",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the deploy request's database",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the deploy request's organization",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "enable": {
                  "description": "Whether or not to enable auto-apply for the deploy request",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the deploy request whose auto-apply setting was updated",
            "schema": {
              "$ref": "#/definitions/deploy_request"
            }
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-requests/{number}/cancel": {
      "post": {
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`, `create_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `deploy_deploy_requests` |\n| Database | `deploy_deploy_requests` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Deploy requests"
        ],
        "summary": "Cancel a queued deploy request",
        "operationId": "cancel-a-queued-deploy-request",
        "parameters": [
          {
            "type": "string",
            "description": "The number of the deploy request",
            "name": "number",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the deploy request's database",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the deploy request's organization",
            "name": "organization",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the deploy request whose deployment was canceled",
            "schema": {
              "$ref": "#/definitions/deploy_request"
            }
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-requests/{number}/complete-deploy": {
      "post": {
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`, `create_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `deploy_deploy_requests` |\n| Database | `deploy_deploy_requests` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Deploy requests"
        ],
        "summary": "Complete an errored deploy",
        "operationId": "complete-an-errored-deploy",
        "parameters": [
          {
            "type": "string",
            "description": "The number of the deploy request",
            "name": "number",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the deploy request's database",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the deploy request's organization",
            "name": "organization",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the completed deploy request",
            "schema": {
              "$ref": "#/definitions/deploy_request"
            }
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-requests/{number}/deploy": {
      "post": {
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`, `create_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `deploy_deploy_requests` |\n| Database | `deploy_deploy_requests` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Deploy requests"
        ],
        "summary": "Queue a deploy request",
        "operationId": "queue-a-deploy-request",
        "parameters": [
          {
            "type": "string",
            "description": "The number of the deploy request",
            "name": "number",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the database the deploy request belongs to",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the organization the deploy request belongs to",
            "name": "organization",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the deployed deploy request",
            "schema": {
              "$ref": "#/definitions/deploy_request"
            }
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-requests/{number}/deployment": {
      "get": {
        "description": "Get the deployment for a deploy request\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_deploy_requests` |\n| Database | `read_deploy_requests` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Deploy requests"
        ],
        "summary": "Get a deployment",
        "operationId": "get-a-deployment",
        "parameters": [
          {
            "type": "string",
            "description": "The number of the deploy request",
            "name": "number",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the deploy request's database",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the deploy request's organization",
            "name": "organization",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the deployment for a deploy request",
            "schema": {
              "$ref": "#/definitions/deployment"
            }
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-requests/{number}/operations": {
      "get": {
        "description": "List deploy operations for a deploy request\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_deploy_requests` |\n| Database | `read_deploy_requests` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Deploy requests"
        ],
        "summary": "List deploy operations",
        "operationId": "list-deploy-operations",
        "parameters": [
          {
            "type": "string",
            "description": "The number of the deploy request",
            "name": "number",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the database the deploy request belongs to",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the organization the deploy request belongs to",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "default": 1,
            "description": "If provided, specifies the page offset of returned results",
            "name": "page",
            "in": "query"
          },
          {
            "type": "number",
            "default": 25,
            "description": "If provided, specifies the number of returned results",
            "name": "per_page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of deploy operations for the deploy request",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/deploy_operation"
                  }
                }
              },
              "additionalProperties": false
            }
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-requests/{number}/revert": {
      "post": {
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`, `create_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `deploy_deploy_requests` |\n| Database | `deploy_deploy_requests` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Deploy requests"
        ],
        "summary": "Complete a revert",
        "operationId": "complete-a-revert",
        "parameters": [
          {
            "type": "string",
            "description": "The number of the deploy request",
            "name": "number",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the deploy request's database",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the deploy request's organization",
            "name": "organization",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the deploy request that was reverted",
            "schema": {
              "$ref": "#/definitions/deploy_request"
            }
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-requests/{number}/reviews": {
      "get": {
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_deploy_requests` |\n| Database | `read_deploy_requests` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Deploy requests"
        ],
        "summary": "List deploy request reviews",
        "operationId": "list-deploy-request-reviews",
        "parameters": [
          {
            "type": "string",
            "description": "The number of the deploy request",
            "name": "number",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the database the deploy request belongs to",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the organization the deploy request belongs to",
            "name": "organization",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of deploy request reviews",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/deploy_review"
                  }
                }
              },
              "additionalProperties": false
            }
          }
        }
      },
      "post": {
        "description": "Review a deploy request by either approving or commenting on the deploy request\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `approve_deploy_request`, `review_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `approve_deploy_requests` |\n| Database | `approve_deploy_requests` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Deploy requests"
        ],
        "summary": "Review a deploy request",
        "operationId": "review-a-deploy-request",
        "parameters": [
          {
            "type": "string",
            "description": "The number of the deploy request",
            "name": "number",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the database the deploy request belongs to",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the organization the deploy request belongs to",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "body": {
                  "description": "Deploy request review comments",
                  "type": "string"
                },
                "state": {
                  "description": "Whether the review is a comment or approval. Service tokens must have corresponding access (either `approve_deploy_request` or `review_deploy_request`)",
                  "type": "string",
                  "enum": [
                    "commented",
                    "approved"
                  ]
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the created deploy request review",
            "schema": {
              "$ref": "#/definitions/deploy_review"
            }
          }
        }
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-requests/{number}/skip-revert": {
      "post": {
        "description": "Skips the revert period for a deploy request\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`, `create_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `deploy_deploy_requests` |\n| Database | `deploy_deploy_requests` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Deploy requests"
        ],
        "summary": "Skip revert period",
        "operationId": "skip-revert-period",
        "parameters": [
          {
            "type": "string",
            "description": "The number of the deploy request",
            "name": "number",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the deploy request's database",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the deploy request's organization",
            "name": "organization",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the deploy request whose deploy revert was skipped",
            "schema": {
              "$ref": "#/definitions/deploy_request"
            }
          }
        }
      }
    },
    "/organizations/{organization}/databases/{name}": {
      "get": {
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_database`, `delete_database`, `write_database`, `read_branch`, `delete_branch`, `create_branch`, `delete_production_branch`, `connect_branch`, `connect_production_branch`, `delete_branch_password`, `delete_production_branch_password`, `read_deploy_request`, `create_deploy_request`, `approve_deploy_request`, `read_comment`, `create_comment`, `restore_backup`, `restore_production_branch_backup`, `read_backups`, `write_backups`, `delete_backups`, `delete_production_branch_backups`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_databases` |\n| Database | `read_database` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Databases"
        ],
        "summary": "Get a database",
        "operationId": "get-a-database",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the database",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the organization the database belongs to",
            "name": "organization",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a database",
            "schema": {
              "$ref": "#/definitions/database"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `delete_database`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `delete_databases` |\n| Database | `delete_database` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Databases"
        ],
        "summary": "Delete a database",
        "operationId": "delete-a-database",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the database",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the organization the database belongs to",
            "name": "organization",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Deletes a database"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `write_database`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `write_databases` |\n| Database | `write_database` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Databases"
        ],
        "summary": "Update database settings",
        "operationId": "update-database-settings",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the database",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the organization the database belongs to",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "allow_data_branching": {
                  "description": "Whether or not data branching is allowed on the database",
                  "type": "boolean"
                },
                "automatic_migrations": {
                  "description": "Whether or not to copy migration data to new branches and in deploy requests.",
                  "type": "boolean"
                },
                "default_branch": {
                  "description": "The default branch of the database",
                  "type": "string"
                },
                "insights_raw_queries": {
                  "description": "Whether or not full queries should be collected from the database",
                  "type": "boolean"
                },
                "migration_framework": {
                  "description": "A migration framework to use on the database",
                  "type": "string"
                },
                "migration_table_name": {
                  "description": "Name of table to use as migration table for the database",
                  "type": "string"
                },
                "notes": {
                  "description": "Notes on the database",
                  "type": "string"
                },
                "production_branch_web_console": {
                  "description": "Whether or not the web console can be used on the production branch of the database",
                  "type": "boolean"
                },
                "require_approval_for_deploy": {
                  "description": "Whether or not deploy requests must be approved by a database administrator other than the request creator",
                  "type": "boolean"
                },
                "restrict_branch_region": {
                  "description": "Whether or not to limit branch creation to the AWS us-east-1 region.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated database",
            "schema": {
              "$ref": "#/definitions/database"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/organizations/{organization}/databases/{name}/read-only-regions": {
      "get": {
        "description": "List read-only regions for the database's default branch\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_database`, `delete_database`, `write_database`, `read_branch`, `delete_branch`, `create_branch`, `delete_production_branch`, `connect_branch`, `connect_production_branch`, `delete_branch_password`, `delete_production_branch_password`, `read_deploy_request`, `create_deploy_request`, `approve_deploy_request`, `read_comment`, `create_comment`, `restore_backup`, `restore_production_branch_backup`, `read_backups`, `write_backups`, `delete_backups`, `delete_production_branch_backups`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_branches` |\n| Database | `read_branches` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Databases"
        ],
        "summary": "List read-only regions",
        "operationId": "list-read-only-regions",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the database",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the organization the database belongs to",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "default": 1,
            "description": "If provided, specifies the page offset of returned results",
            "name": "page",
            "in": "query"
          },
          {
            "type": "number",
            "default": 25,
            "description": "If provided, specifies the number of returned results",
            "name": "per_page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of the database's read-only regions",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/read_only_region"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/organizations/{organization}/databases/{name}/regions": {
      "get": {
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_database`, `delete_database`, `write_database`, `read_branch`, `delete_branch`, `create_branch`, `delete_production_branch`, `connect_branch`, `connect_production_branch`, `delete_branch_password`, `delete_production_branch_password`, `read_deploy_request`, `create_deploy_request`, `approve_deploy_request`, `read_comment`, `create_comment`, `restore_backup`, `restore_production_branch_backup`, `read_backups`, `write_backups`, `delete_backups`, `delete_production_branch_backups`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_databases` |\n| Database | `read_database` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Databases"
        ],
        "summary": "List database regions",
        "operationId": "list-database-regions",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the database",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the organization the database belongs to",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "default": 1,
            "description": "If provided, specifies the page offset of returned results",
            "name": "page",
            "in": "query"
          },
          {
            "type": "number",
            "default": 25,
            "description": "If provided, specifies the number of returned results",
            "name": "per_page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the available regions for a database",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/region"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/organizations/{organization}/oauth-applications": {
      "get": {
        "description": "\n### Authorization\nA service token   must have at least one of the following access   in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_oauth_applications`\n\n",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "OAuth applications"
        ],
        "summary": "List OAuth applications",
        "operationId": "list-oauth-applications",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the organization the OAuth applications belong to",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "default": 1,
            "description": "If provided, specifies the page offset of returned results",
            "name": "page",
            "in": "query"
          },
          {
            "type": "number",
            "default": 25,
            "description": "If provided, specifies the number of returned results",
            "name": "per_page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of the organization's oauth applications",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/oauth_application"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/organizations/{organization}/oauth-applications/{application_id}": {
      "get": {
        "description": "\n### Authorization\nA service token   must have at least one of the following access   in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_oauth_applications`\n\n",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "OAuth applications"
        ],
        "summary": "Get an OAuth application",
        "operationId": "get-an-oauth-application",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the OAuth application",
            "name": "application_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the organization the OAuth application belongs to",
            "name": "organization",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns information abuot an OAuth application",
            "schema": {
              "$ref": "#/definitions/oauth_application"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/organizations/{organization}/oauth-applications/{application_id}/tokens": {
      "get": {
        "description": "List OAuth tokens created by an OAuth application\n### Authorization\nA service token   must have at least one of the following access   in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_oauth_tokens`\n\n",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "OAuth applications"
        ],
        "summary": "List OAuth tokens",
        "operationId": "list-oauth-tokens",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the OAuth application",
            "name": "application_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the organization the OAuth application belongs to",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "default": 1,
            "description": "If provided, specifies the page offset of returned results",
            "name": "page",
            "in": "query"
          },
          {
            "type": "number",
            "default": 25,
            "description": "If provided, specifies the number of returned results",
            "name": "per_page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of OAuth tokens issued on behalf of the OAuth application",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/oauth_token"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/organizations/{organization}/oauth-applications/{application_id}/tokens/{token_id}": {
      "get": {
        "description": "\n### Authorization\nA service token   must have at least one of the following access   in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_oauth_tokens`\n\n",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "OAuth applications"
        ],
        "summary": "Get an OAuth token",
        "operationId": "get-an-oauth-token",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the OAuth application token",
            "name": "token_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The ID of the OAuth application",
            "name": "application_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the organization the OAuth application belongs to",
            "name": "organization",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an OAuth token that was issued on behalf of the OAuth application",
            "schema": {
              "$ref": "#/definitions/oauth_token_with_details"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "description": "\n### Authorization\nA service token   must have at least one of the following access   in order to use this API endpoint:\n\n**Service Token Accesses**\n `delete_oauth_tokens`\n\n",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "OAuth applications"
        ],
        "summary": "Delete an OAuth token",
        "operationId": "delete-an-oauth-token",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the OAuth application token",
            "name": "token_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The ID of the OAuth application",
            "name": "application_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the organization the OAuth application belongs to",
            "name": "organization",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Deletes an OAuth application's OAuth token"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/organizations/{organization}/oauth-applications/{id}/token": {
      "post": {
        "description": "Create an OAuth token from an authorization grant code, or refresh an OAuth token from a refresh token\n### Authorization\nA service token   must have at least one of the following access   in order to use this API endpoint:\n\n**Service Token Accesses**\n `write_oauth_tokens`\n\n",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "OAuth tokens"
        ],
        "summary": "Create or renew an OAuth token",
        "operationId": "create-or-renew-an-oauth-token",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the OAuth application",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the organization the OAuth application belongs to",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "client_id",
                "client_secret",
                "grant_type"
              ],
              "properties": {
                "client_id": {
                  "description": "The OAuth application's client ID",
                  "type": "string"
                },
                "client_secret": {
                  "description": "The OAuth applicatin's client secret",
                  "type": "string"
                },
                "code": {
                  "description": "The OAuth grant code provided to your OAuth application's redirect URI. Required when grant_type is authorization_code",
                  "type": "string"
                },
                "grant_type": {
                  "description": "Whether an OAuth grant code or a refresh token is being exchanged for an OAuth token",
                  "type": "string",
                  "enum": [
                    "authorization_code",
                    "refresh_token"
                  ]
                },
                "redirect_uri": {
                  "description": "The OAuth application's redirect URI. Required when grant_type is authorization_code",
                  "type": "string"
                },
                "refresh_token": {
                  "description": "The refresh token from the original OAuth token grant. Required when grant_type is refresh_token",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the created OAuth token",
            "schema": {
              "$ref": "#/definitions/created_oauth_token"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user": {
      "get": {
        "description": "Get the user associated with this service token\n### Authorization\nA   OAuth token must have at least one of the following   scopes in order to use this API endpoint:\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| User | `read_user` |",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get current user",
        "operationId": "get-current-user",
        "responses": {
          "200": {
            "description": "Returns the current user that is associated with this service token",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "definitions": {
    "actor": {
      "type": "object",
      "required": [
        "id",
        "display_name",
        "avatar_url"
      ],
      "properties": {
        "avatar_url": {
          "description": "The URL of the actor's avatar",
          "type": "string"
        },
        "display_name": {
          "description": "The name of the actor",
          "type": "string"
        },
        "id": {
          "description": "The ID of the actor",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "backup": {
      "type": "object",
      "required": [
        "id",
        "actor",
        "name",
        "state",
        "size",
        "estimated_storage_cost",
        "created_at",
        "updated_at",
        "required",
        "backup_policy",
        "schema_snapshot"
      ],
      "properties": {
        "actor": {
          "$ref": "#/definitions/actor"
        },
        "backup_policy": {
          "$ref": "#/definitions/backup_policy"
        },
        "created_at": {
          "description": "When the backup was created",
          "type": "string"
        },
        "estimated_storage_cost": {
          "description": "The estimated storage cost of the backup",
          "type": "number"
        },
        "id": {
          "description": "The ID of the backup",
          "type": "string"
        },
        "name": {
          "description": "The name of the backup",
          "type": "string"
        },
        "required": {
          "description": "Whether or not the backup policy is required",
          "type": "boolean"
        },
        "restored_branches": {
          "description": "Branches that have been restored with this backup",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "schema_snapshot": {
          "$ref": "#/definitions/schema_snapshot"
        },
        "size": {
          "description": "The size of the backup",
          "type": "number"
        },
        "state": {
          "description": "The current state of the backup",
          "type": "string",
          "enum": [
            "pending",
            "running",
            "success",
            "failed",
            "canceled",
            "ignored"
          ]
        },
        "updated_at": {
          "description": "When the backup was last updated",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "backup_policy": {
      "type": "object",
      "required": [
        "id",
        "name",
        "target",
        "retention_value",
        "retention_unit",
        "frequency_value",
        "frequency_unit",
        "schedule_day",
        "schedule_week",
        "created_at",
        "updated_at",
        "last_ran_at",
        "next_run_at"
      ],
      "properties": {
        "created_at": {
          "description": "When the backup policy was created",
          "type": "string"
        },
        "frequency_unit": {
          "description": "The unit for the frequency of the backup policy",
          "type": "string"
        },
        "frequency_value": {
          "description": "A number value for the frequency of the backup policy",
          "type": "number"
        },
        "id": {
          "description": "The ID of the backup policy",
          "type": "string"
        },
        "last_ran_at": {
          "description": "When the backup was last run",
          "type": "string"
        },
        "name": {
          "description": "The name of the backup policy",
          "type": "string"
        },
        "next_run_at": {
          "description": "When the backup will next run",
          "type": "string"
        },
        "retention_unit": {
          "description": "The unit for the retention period of the backup policy",
          "type": "string"
        },
        "retention_value": {
          "description": "A number value for the retention period of the backup policy",
          "type": "number"
        },
        "schedule_day": {
          "description": "Day of the week that the backup is scheduled",
          "type": "string",
          "enum": [
            "0..6"
          ]
        },
        "schedule_week": {
          "description": "Week of the month that the backup is scheduled",
          "type": "string",
          "enum": [
            "0..3"
          ]
        },
        "target": {
          "description": "Whether the backup policy is for a production or development database, or for a database branch",
          "type": "string",
          "enum": [
            "production",
            "development",
            "branch"
          ]
        },
        "updated_at": {
          "description": "When the backup policy was last updated",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "branch": {
      "type": "object",
      "required": [
        "id",
        "name",
        "created_at",
        "updated_at",
        "schema_last_updated_at",
        "mysql_address",
        "mysql_edge_address",
        "ready",
        "production",
        "sharded",
        "html_url",
        "cluster_rate_name"
      ],
      "properties": {
        "access_host_url": {
          "description": "The access host URL for the branch. This is a legacy field, use `mysql_edge_address`",
          "type": "string"
        },
        "actor": {
          "$ref": "#/definitions/actor"
        },
        "cluster_rate_name": {
          "description": "The SKU representing the branch's cluster size",
          "type": "string"
        },
        "created_at": {
          "description": "When the branch was created",
          "type": "string"
        },
        "html_url": {
          "description": "Planetscale app URL for the branch",
          "type": "string"
        },
        "id": {
          "description": "The ID of the branch",
          "type": "string"
        },
        "initial_restore_id": {
          "description": "The ID of the backup from which the branch was restored",
          "type": "string"
        },
        "mysql_address": {
          "description": "The MySQL address for the branch",
          "type": "string"
        },
        "mysql_edge_address": {
          "description": "The address of the MySQL provider for the branch",
          "type": "string"
        },
        "name": {
          "description": "The name of the branch",
          "type": "string"
        },
        "parent_branch": {
          "description": "The name of the parent branch from which the branch was created",
          "type": "string"
        },
        "production": {
          "description": "Whether or not the branch is a production branch",
          "type": "boolean"
        },
        "ready": {
          "description": "Whether or not the branch is ready to serve queries",
          "type": "boolean"
        },
        "region": {
          "$ref": "#/definitions/region"
        },
        "restore_checklist_completed_at": {
          "description": "When a user last marked a backup restore checklist as completed",
          "type": "string"
        },
        "restored_from_branch": {
          "$ref": "#/definitions/restored_from_branch"
        },
        "schema_last_updated_at": {
          "description": "When the schema for the branch was last updated",
          "type": "string"
        },
        "shard_count": {
          "description": "The number of shards in the branch",
          "type": "number"
        },
        "sharded": {
          "description": "Whether or not the branch is sharded",
          "type": "boolean"
        },
        "updated_at": {
          "description": "When the branch was last updated",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "created_oauth_token": {
      "type": "object",
      "properties": {
        "actor_display_name": {
          "description": "The name of the actor on whose behalf the token was issued",
          "type": "string"
        },
        "actor_id": {
          "description": "The ID of the actor on whose behalf the token was issued",
          "type": "string"
        },
        "display_name": {
          "description": "The display name of the OAuth token",
          "type": "string"
        },
        "name": {
          "description": "The name of the OAuth token",
          "type": "string"
        },
        "plain_text_refresh_token": {
          "description": "The refresh token used to refresh this OAuth token",
          "type": "string"
        },
        "service_token_accesses": {
          "description": "The accesses issued to this OAuth token",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "token": {
          "description": "The plain text OAuth token",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "data_import": {
      "type": "object",
      "required": [
        "state",
        "import_check_errors",
        "started_at",
        "finished_at",
        "data_source"
      ],
      "properties": {
        "data_source": {
          "$ref": "#/definitions/data_source"
        },
        "finished_at": {
          "type": "string"
        },
        "import_check_errors": {
          "type": "string"
        },
        "started_at": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "data_source": {
      "type": "object",
      "required": [
        "hostname",
        "port",
        "database"
      ],
      "properties": {
        "database": {
          "type": "string"
        },
        "hostname": {
          "type": "string"
        },
        "port": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "database": {
      "type": "object",
      "required": [
        "id",
        "type",
        "url",
        "branches_url",
        "branches_count",
        "development_branches_count",
        "production_branches_count",
        "issues_count",
        "multiple_admins_required_for_deletion",
        "ready",
        "at_development_branch_limit",
        "at_backup_restore_branches_limit",
        "region",
        "html_url",
        "name",
        "state",
        "sharded",
        "default_branch_shard_count",
        "default_branch_read_only_regions_count",
        "default_branch_table_count",
        "default_branch",
        "require_approval_for_deploy",
        "allow_data_branching",
        "restrict_branch_region",
        "insights_raw_queries",
        "plan",
        "production_branch_web_console",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "allow_data_branching": {
          "description": "Whether seeding branches with data is enabled for all branches",
          "type": "boolean"
        },
        "at_backup_restore_branches_limit": {
          "description": "If the database has reached its backup restored branch limit",
          "type": "boolean"
        },
        "at_development_branch_limit": {
          "description": "If the database has reached its development branch limit",
          "type": "boolean"
        },
        "automatic_migrations": {
          "description": "Whether to automatically manage Rails migrations during deploy requests",
          "type": "boolean"
        },
        "branches_count": {
          "description": "The total number of database branches",
          "type": "number"
        },
        "branches_url": {
          "description": "The URL to retrieve this database's branches via the API",
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "data_import": {
          "$ref": "#/definitions/data_import"
        },
        "default_branch": {
          "description": "The default branch for the database",
          "type": "string"
        },
        "default_branch_read_only_regions_count": {
          "description": "Number of read only regions in the default branch",
          "type": "number"
        },
        "default_branch_shard_count": {
          "description": "Number of shards in the default branch",
          "type": "number"
        },
        "default_branch_table_count": {
          "description": "Number of tables in the default branch schema",
          "type": "number"
        },
        "development_branches_count": {
          "description": "The total number of database development branches",
          "type": "number"
        },
        "html_url": {
          "description": "The URL to see this database's branches in the web UI",
          "type": "string"
        },
        "id": {
          "description": "The ID of the database",
          "type": "string"
        },
        "insights_raw_queries": {
          "description": "Whether raw SQL queries are collected",
          "type": "boolean"
        },
        "issues_count": {
          "description": "The total number of ongoing issues within a database",
          "type": "number"
        },
        "migration_framework": {
          "description": "Framework used for applying migrations",
          "type": "string"
        },
        "migration_table_name": {
          "description": "Table name to use for copying schema migration data",
          "type": "string"
        },
        "multiple_admins_required_for_deletion": {
          "description": "If the database requires multiple admins for deletion",
          "type": "boolean"
        },
        "name": {
          "description": "Name of the database",
          "type": "string"
        },
        "plan": {
          "description": "The database plan",
          "type": "string"
        },
        "production_branch_web_console": {
          "description": "Whether web console is enabled for production branches",
          "type": "boolean"
        },
        "production_branches_count": {
          "description": "The total number of database production branches",
          "type": "number"
        },
        "ready": {
          "description": "If the database is ready to be used",
          "type": "boolean"
        },
        "region": {
          "$ref": "#/definitions/region"
        },
        "require_approval_for_deploy": {
          "description": "Whether an approval is required to deploy schema changes to this database",
          "type": "boolean"
        },
        "restrict_branch_region": {
          "description": "Whether to restrict branch creation to one region",
          "type": "boolean"
        },
        "schema_last_updated_at": {
          "description": "When the default branch schema was last changed.",
          "type": "string"
        },
        "sharded": {
          "description": "If the database is sharded",
          "type": "boolean"
        },
        "state": {
          "description": "State of the database",
          "type": "string"
        },
        "type": {
          "description": "The object type",
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "url": {
          "description": "The URL to the database API endpoint",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "deploy_operation": {
      "type": "object",
      "required": [
        "id",
        "state",
        "keyspace_name",
        "table_name",
        "operation_name",
        "eta_seconds",
        "progress_percentage",
        "deploy_error_docs_url",
        "ddl_statement",
        "syntax_highlighted_ddl",
        "created_at",
        "updated_at",
        "can_drop_data",
        "table_recently_used",
        "table_recently_used_at",
        "deploy_errors"
      ],
      "properties": {
        "can_drop_data": {
          "description": "Whether or not the deploy operation is capable of dropping data",
          "type": "boolean"
        },
        "created_at": {
          "description": "When the deploy operation was created",
          "type": "string"
        },
        "ddl_statement": {
          "description": "The DDL statement for the deploy operation",
          "type": "string"
        },
        "deploy_error_docs_url": {
          "description": "A link to documentation explaining the deploy error, if present",
          "type": "string"
        },
        "deploy_errors": {
          "description": "Deploy errors for the deploy operation",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "eta_seconds": {
          "description": "The estimated seconds until completion for the deploy operation",
          "type": "number"
        },
        "id": {
          "description": "The ID for the deploy operation",
          "type": "string"
        },
        "keyspace_name": {
          "description": "The keyspace modified by the deploy operation",
          "type": "string"
        },
        "operation_name": {
          "description": "The operation name of the deploy operation",
          "type": "string"
        },
        "progress_percentage": {
          "description": "The percent completion for the deploy operation",
          "type": "number"
        },
        "state": {
          "description": "The state of the deploy operation",
          "type": "string",
          "enum": [
            "pending",
            "queued",
            "in_progress",
            "complete",
            "cancelled",
            "error"
          ]
        },
        "syntax_highlighted_ddl": {
          "description": "A syntax-highlighted DDL statement for the deploy operation",
          "type": "string"
        },
        "table_name": {
          "description": "The name of the table modifed by the deploy operation",
          "type": "string"
        },
        "table_recently_used": {
          "description": "Whether or not the table modified by the deploy operation was recently used",
          "type": "boolean"
        },
        "table_recently_used_at": {
          "description": "When the table modified by the deploy operation was last used",
          "type": "string"
        },
        "updated_at": {
          "description": "When the deploy operation was last updated",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "deploy_request": {
      "type": "object",
      "required": [
        "number",
        "id",
        "actor",
        "closed_by",
        "branch",
        "branch_deleted",
        "branch_deleted_by",
        "branch_deleted_at",
        "into_branch",
        "into_branch_sharded",
        "into_branch_shard_count",
        "approved",
        "state",
        "deployment_state",
        "html_url",
        "notes",
        "html_body",
        "created_at",
        "updated_at",
        "closed_at",
        "deployed_at"
      ],
      "properties": {
        "actor": {
          "$ref": "#/definitions/actor"
        },
        "approved": {
          "description": "Whether or not the deploy request is approved",
          "type": "boolean"
        },
        "branch": {
          "description": "The name of the branch the deploy request was created from",
          "type": "string"
        },
        "branch_deleted": {
          "description": "Whether or not the deploy request branch was deleted",
          "type": "boolean"
        },
        "branch_deleted_at": {
          "description": "When the deploy request branch was deleted",
          "type": "string"
        },
        "branch_deleted_by": {
          "$ref": "#/definitions/actor"
        },
        "closed_at": {
          "description": "When the deploy request was closed",
          "type": "string"
        },
        "closed_by": {
          "$ref": "#/definitions/actor"
        },
        "created_at": {
          "description": "When the deploy request was created",
          "type": "string"
        },
        "deployed_at": {
          "description": "When the deploy request was deployed",
          "type": "string"
        },
        "deployment_state": {
          "description": "The deployment state of the deploy request",
          "type": "string",
          "enum": [
            "pending",
            "ready",
            "no_changes",
            "queued",
            "submitting",
            "in_progress",
            "pending_cutover",
            "in_progress_vschema",
            "in_progress_cancel",
            "in_progress_cutover",
            "complete",
            "complete_cancel",
            "complete_error",
            "complete_pending_revert",
            "in_progress_revert",
            "complete_revert",
            "complete_revert_error",
            "cancelled",
            "error"
          ]
        },
        "html_body": {
          "description": "The HTML body of the deploy request",
          "type": "string"
        },
        "html_url": {
          "description": "The PlanetScale app address for the deploy request",
          "type": "string"
        },
        "id": {
          "description": "The ID of the deploy request",
          "type": "string"
        },
        "into_branch": {
          "description": "The name of the branch the deploy request will be merged into",
          "type": "string"
        },
        "into_branch_shard_count": {
          "description": "The number of shards the branch the deploy request will be merged into has",
          "type": "number"
        },
        "into_branch_sharded": {
          "description": "Whether or not the branch the deploy request will be merged into is sharded",
          "type": "boolean"
        },
        "notes": {
          "description": "Notes on the deploy request",
          "type": "string"
        },
        "number": {
          "description": "The number of the deploy request",
          "type": "number"
        },
        "state": {
          "description": "Whether the deploy request is open or closed",
          "type": "string",
          "enum": [
            "open",
            "closed"
          ]
        },
        "updated_at": {
          "description": "When the deploy request was last updated",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "deploy_request_with_deployment": {
      "type": "object",
      "required": [
        "number",
        "id",
        "actor",
        "closed_by",
        "branch",
        "branch_deleted",
        "branch_deleted_by",
        "branch_deleted_at",
        "into_branch",
        "into_branch_sharded",
        "into_branch_shard_count",
        "approved",
        "state",
        "deployment_state",
        "html_url",
        "notes",
        "html_body",
        "created_at",
        "updated_at",
        "closed_at",
        "deployed_at",
        "deployment"
      ],
      "properties": {
        "actor": {
          "$ref": "#/definitions/actor"
        },
        "approved": {
          "description": "Whether or not the deploy request is approved",
          "type": "boolean"
        },
        "branch": {
          "description": "The name of the branch the deploy request was created from",
          "type": "string"
        },
        "branch_deleted": {
          "description": "Whether or not the deploy request branch was deleted",
          "type": "boolean"
        },
        "branch_deleted_at": {
          "description": "When the deploy request branch was deleted",
          "type": "string"
        },
        "branch_deleted_by": {
          "$ref": "#/definitions/actor"
        },
        "closed_at": {
          "description": "When the deploy request was closed",
          "type": "string"
        },
        "closed_by": {
          "$ref": "#/definitions/actor"
        },
        "created_at": {
          "description": "When the deploy request was created",
          "type": "string"
        },
        "deployed_at": {
          "description": "When the deploy request was deployed",
          "type": "string"
        },
        "deployment": {
          "$ref": "#/definitions/deployment"
        },
        "deployment_state": {
          "description": "The deployment state of the deploy request",
          "type": "string",
          "enum": [
            "pending",
            "ready",
            "no_changes",
            "queued",
            "submitting",
            "in_progress",
            "pending_cutover",
            "in_progress_vschema",
            "in_progress_cancel",
            "in_progress_cutover",
            "complete",
            "complete_cancel",
            "complete_error",
            "complete_pending_revert",
            "in_progress_revert",
            "complete_revert",
            "complete_revert_error",
            "cancelled",
            "error"
          ]
        },
        "html_body": {
          "description": "The HTML body of the deploy request",
          "type": "string"
        },
        "html_url": {
          "description": "The PlanetScale app address for the deploy request",
          "type": "string"
        },
        "id": {
          "description": "The ID of the deploy request",
          "type": "string"
        },
        "into_branch": {
          "description": "The name of the branch the deploy request will be merged into",
          "type": "string"
        },
        "into_branch_shard_count": {
          "description": "The number of shards the branch the deploy request will be merged into has",
          "type": "number"
        },
        "into_branch_sharded": {
          "description": "Whether or not the branch the deploy request will be merged into is sharded",
          "type": "boolean"
        },
        "notes": {
          "description": "Notes on the deploy request",
          "type": "string"
        },
        "number": {
          "description": "The number of the deploy request",
          "type": "number"
        },
        "state": {
          "description": "Whether the deploy request is open or closed",
          "type": "string",
          "enum": [
            "open",
            "closed"
          ]
        },
        "updated_at": {
          "description": "When the deploy request was last updated",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "deploy_review": {
      "type": "object",
      "required": [
        "id",
        "actor",
        "body",
        "html_body",
        "state",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "actor": {
          "$ref": "#/definitions/actor"
        },
        "body": {
          "description": "The text body of the review",
          "type": "string"
        },
        "created_at": {
          "description": "When the review was created",
          "type": "string"
        },
        "html_body": {
          "description": "The HTML body of the review",
          "type": "string"
        },
        "id": {
          "description": "The id of the review",
          "type": "string"
        },
        "state": {
          "description": "Whether the review is a comment or approval",
          "type": "string",
          "enum": [
            "commented",
            "approved"
          ]
        },
        "updated_at": {
          "description": "When the review was last updated",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "deployment": {
      "type": "object",
      "required": [
        "id",
        "auto_cutover",
        "created_at",
        "cutover_expiring",
        "state",
        "submitted_at",
        "updated_at"
      ],
      "properties": {
        "auto_cutover": {
          "description": "Whether or not to automatically cutover once deployment is finished",
          "type": "boolean"
        },
        "created_at": {
          "description": "When the deployment was created",
          "type": "string"
        },
        "cutover_at": {
          "description": "When the cutover for the deployment was initiated",
          "type": "string"
        },
        "cutover_expiring": {
          "description": "Whether or not the deployment cutover will expire soon and be cancelled",
          "type": "boolean"
        },
        "deploy_check_errors": {
          "description": "Deploy check errors for the deployment",
          "type": "string"
        },
        "finished_at": {
          "description": "When the deployment was finished",
          "type": "string"
        },
        "id": {
          "description": "The ID for a deployment",
          "type": "string"
        },
        "queued_at": {
          "description": "When the deployment was queued",
          "type": "string"
        },
        "ready_to_cutover_at": {
          "description": "When the deployment was ready for cutover",
          "type": "string"
        },
        "started_at": {
          "description": "When the deployment was started",
          "type": "string"
        },
        "state": {
          "description": "The state the deployment is in",
          "type": "string",
          "enum": [
            "pending",
            "ready",
            "no_changes",
            "queued",
            "submitting",
            "in_progress",
            "pending_cutover",
            "in_progress_vschema",
            "in_progress_cancel",
            "in_progress_cutover",
            "complete",
            "complete_cancel",
            "complete_error",
            "complete_pending_revert",
            "in_progress_revert",
            "complete_revert",
            "complete_revert_error",
            "cancelled",
            "error"
          ]
        },
        "submitted_at": {
          "description": "When the deployment was submitted",
          "type": "string"
        },
        "updated_at": {
          "description": "When the deployment was last updated",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "features": {
      "type": "object",
      "properties": {
        "insights": {
          "type": "boolean"
        },
        "single_tenancy": {
          "type": "boolean"
        },
        "sso": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "flags": {
      "type": "object",
      "properties": {
        "example_flag": {
          "type": "string",
          "enum": [
            "full",
            "on"
          ]
        }
      },
      "additionalProperties": false
    },
    "lint_error": {
      "type": "object",
      "required": [
        "lint_error",
        "subject_type",
        "keyspace_name",
        "table_name",
        "error_description",
        "docs_url",
        "column_name",
        "foreign_key_column_names",
        "auto_increment_column_names",
        "charset_name",
        "engine_name",
        "vindex_name",
        "json_path",
        "check_constraint_name",
        "enum_value",
        "partitioning_type",
        "partition_name"
      ],
      "properties": {
        "auto_increment_column_names": {
          "description": "A list of invalid auto-incremented columns",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "charset_name": {
          "description": "The charset of the schema",
          "type": "string"
        },
        "check_constraint_name": {
          "description": "The name of the invalid check constraint",
          "type": "string"
        },
        "column_name": {
          "description": "The column in a table relevant to the error",
          "type": "string"
        },
        "docs_url": {
          "description": "A link to the documentation related to the error",
          "type": "string"
        },
        "engine_name": {
          "description": "The engine of the schema",
          "type": "string"
        },
        "enum_value": {
          "description": "The name of the invalid enum value",
          "type": "string"
        },
        "error_description": {
          "description": "A description for the error that occurred",
          "type": "string"
        },
        "foreign_key_column_names": {
          "description": "A list of invalid foreign key columns in a table",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "json_path": {
          "description": "The path for an invalid JSON column",
          "type": "string"
        },
        "keyspace_name": {
          "description": "The keyspace of the schema with the error",
          "type": "string"
        },
        "lint_error": {
          "description": "Code representing",
          "type": "string"
        },
        "partition_name": {
          "description": "The name of the invalid partition in the schema",
          "type": "string"
        },
        "partitioning_type": {
          "description": "The name of the invalid partitioning type",
          "type": "string"
        },
        "subject_type": {
          "description": "The subject for the errors",
          "type": "string",
          "enum": [
            "table",
            "vschema",
            "routing_rules"
          ]
        },
        "table_name": {
          "description": "The table with the error",
          "type": "string"
        },
        "vindex_name": {
          "description": "The name of the vindex for the schema",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "oauth_accesses_by_resource": {
      "type": "object",
      "required": [
        "user",
        "organization",
        "database",
        "branch"
      ],
      "properties": {
        "branch": {
          "$ref": "#/definitions/oauth_branch_accesses"
        },
        "database": {
          "$ref": "#/definitions/oauth_database_accesses"
        },
        "organization": {
          "$ref": "#/definitions/oauth_organization_accesses"
        },
        "user": {
          "$ref": "#/definitions/oauth_user_accesses"
        }
      },
      "additionalProperties": false
    },
    "oauth_application": {
      "type": "object",
      "required": [
        "id",
        "name",
        "redirect_uri",
        "domain",
        "created_at",
        "updated_at",
        "scopes",
        "client_id",
        "tokens"
      ],
      "properties": {
        "avatar": {
          "description": "The image source for the OAuth application's avatar",
          "type": "string"
        },
        "client_id": {
          "description": "The OAuth application's unique client id",
          "type": "string"
        },
        "created_at": {
          "description": "When the OAuth application was created",
          "type": "string"
        },
        "domain": {
          "description": "The domain of the OAuth application. Used for verification of a valid redirect uri",
          "type": "string"
        },
        "id": {
          "description": "The ID of the OAuth application",
          "type": "string"
        },
        "name": {
          "description": "The name of the OAuth application",
          "type": "string"
        },
        "redirect_uri": {
          "description": "The redirect URI of the OAuth application",
          "type": "string"
        },
        "scopes": {
          "description": "The scopes that the OAuth application requires on a user's accout",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tokens": {
          "description": "The number of tokens issued by the OAuth application",
          "type": "number"
        },
        "updated_at": {
          "description": "When the OAuth application was last updated",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "oauth_branch_accesses": {
      "type": "object",
      "required": [
        "branches",
        "accesses"
      ],
      "properties": {
        "accesses": {
          "description": "Accesses the token has on the resources",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "branches": {
          "description": "Branches the token has access to",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "oauth_database_accesses": {
      "type": "object",
      "required": [
        "databases",
        "accesses"
      ],
      "properties": {
        "accesses": {
          "description": "Accesses the token has on the resources",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "databases": {
          "description": "Databases the token has access to",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "oauth_organization_accesses": {
      "type": "object",
      "required": [
        "organizations",
        "accesses"
      ],
      "properties": {
        "accesses": {
          "description": "Accesses the token has on the resources",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "organizations": {
          "description": "Organizations the token has access to",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "oauth_token": {
      "type": "object",
      "required": [
        "id",
        "display_name",
        "avatar_url",
        "created_at",
        "updated_at",
        "expires_at",
        "last_used_at",
        "name",
        "actor_id",
        "actor_display_name",
        "actor_type"
      ],
      "properties": {
        "actor_display_name": {
          "description": "The name of the actor on whose behalf the service token was created",
          "type": "string"
        },
        "actor_id": {
          "description": "The ID of the actor on whose behalf the service token was created",
          "type": "string"
        },
        "actor_type": {
          "description": "The type of the actor on whose behalf the service token was created",
          "type": "string"
        },
        "avatar_url": {
          "description": "The image source for the avatar of the service token",
          "type": "string"
        },
        "created_at": {
          "description": "When the service token was created",
          "type": "string"
        },
        "display_name": {
          "description": "The display name of the service token",
          "type": "string"
        },
        "expires_at": {
          "description": "When the service token will expire",
          "type": "string"
        },
        "id": {
          "description": "The ID of the service token",
          "type": "string"
        },
        "last_used_at": {
          "description": "When the service token was last used",
          "type": "string"
        },
        "name": {
          "description": "The name of the service token",
          "type": "string"
        },
        "updated_at": {
          "description": "When the service token was last updated",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "oauth_token_with_details": {
      "type": "object",
      "required": [
        "id",
        "display_name",
        "avatar_url",
        "created_at",
        "updated_at",
        "expires_at",
        "last_used_at",
        "name",
        "actor_id",
        "actor_display_name",
        "actor_type",
        "oauth_accesses_by_resource"
      ],
      "properties": {
        "actor_display_name": {
          "description": "The name of the actor on whose behalf the service token was created",
          "type": "string"
        },
        "actor_id": {
          "description": "The ID of the actor on whose behalf the service token was created",
          "type": "string"
        },
        "actor_type": {
          "description": "The type of the actor on whose behalf the service token was created",
          "type": "string"
        },
        "avatar_url": {
          "description": "The image source for the avatar of the service token",
          "type": "string"
        },
        "created_at": {
          "description": "When the service token was created",
          "type": "string"
        },
        "display_name": {
          "description": "The display name of the service token",
          "type": "string"
        },
        "expires_at": {
          "description": "When the service token will expire",
          "type": "string"
        },
        "id": {
          "description": "The ID of the service token",
          "type": "string"
        },
        "last_used_at": {
          "description": "When the service token was last used",
          "type": "string"
        },
        "name": {
          "description": "The name of the service token",
          "type": "string"
        },
        "oauth_accesses_by_resource": {
          "$ref": "#/definitions/oauth_accesses_by_resource"
        },
        "updated_at": {
          "description": "When the service token was last updated",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "oauth_user_accesses": {
      "type": "object",
      "required": [
        "users",
        "accesses"
      ],
      "properties": {
        "accesses": {
          "description": "Accesses the token has on the resources",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "users": {
          "description": "Users the token has access to",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "organization": {
      "type": "object",
      "required": [
        "id",
        "name",
        "created_at",
        "updated_at",
        "plan",
        "valid_billing_info",
        "sso",
        "sso_directory",
        "single_tenancy",
        "has_past_due_invoices",
        "can_create_databases",
        "free_databases_remaining",
        "database_count",
        "sleeping_database_count",
        "admin_only_production_access",
        "idp_managed_roles"
      ],
      "properties": {
        "admin_only_production_access": {
          "description": "Whether or not only administrators can access production branches in the organization",
          "type": "boolean"
        },
        "billing_email": {
          "description": "The billing email of the organization",
          "type": "string"
        },
        "can_create_databases": {
          "description": "Whether or not more databases can be created in the organization",
          "type": "boolean"
        },
        "created_at": {
          "description": "When the organization was created",
          "type": "string"
        },
        "database_count": {
          "description": "The number of databases in the organization",
          "type": "number"
        },
        "features": {
          "$ref": "#/definitions/features"
        },
        "flags": {
          "$ref": "#/definitions/flags"
        },
        "free_databases_remaining": {
          "description": "The number of remaining free databases that can be created in the organization",
          "type": "number"
        },
        "has_past_due_invoices": {
          "description": "Whether or not the organization has past due billing invoices",
          "type": "boolean"
        },
        "id": {
          "description": "The ID for the organization",
          "type": "string"
        },
        "idp_managed_roles": {
          "description": "Whether or not the IdP provider is be responsible for managing roles in PlanetScale",
          "type": "boolean"
        },
        "name": {
          "description": "The name of the organization",
          "type": "string"
        },
        "plan": {
          "description": "The billing plan of the organization",
          "type": "string"
        },
        "single_tenancy": {
          "description": "Whether or not the organization has single tenancy enabled",
          "type": "boolean"
        },
        "sleeping_database_count": {
          "description": "The number of sleeping databases in the organization",
          "type": "number"
        },
        "sso": {
          "description": "Whether or not SSO is enabled on the organization",
          "type": "boolean"
        },
        "sso_directory": {
          "description": "Whether or not the organization uses a WorkOS directory",
          "type": "boolean"
        },
        "sso_portal_url": {
          "description": "The URL of the organization's SSO portal",
          "type": "string"
        },
        "updated_at": {
          "description": "When the organization was last updated",
          "type": "string"
        },
        "valid_billing_info": {
          "description": "Whether or not the organization's billing information is valid",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "password": {
      "type": "object",
      "required": [
        "id",
        "name",
        "role",
        "created_at",
        "ttl_seconds",
        "access_host_url",
        "renewable",
        "database_branch",
        "integrations"
      ],
      "properties": {
        "access_host_url": {
          "description": "The host URL for the password",
          "type": "string"
        },
        "actor": {
          "$ref": "#/definitions/actor"
        },
        "created_at": {
          "description": "When the password was created",
          "type": "string"
        },
        "database_branch": {
          "$ref": "#/definitions/password_branch"
        },
        "deleted_at": {
          "description": "When the password was deleted",
          "type": "string"
        },
        "expires_at": {
          "description": "When the password will expire",
          "type": "string"
        },
        "id": {
          "description": "The ID for the password",
          "type": "string"
        },
        "integrations": {
          "description": "Integrations the password is associated with",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "The display name for the password",
          "type": "string"
        },
        "region": {
          "$ref": "#/definitions/region"
        },
        "renewable": {
          "description": "Whether or not the password can be renewed",
          "type": "boolean"
        },
        "role": {
          "description": "The role for the password",
          "type": "string"
        },
        "ttl_seconds": {
          "description": "Time to live (in seconds) for the password. The password will be invalid when TTL has passed",
          "type": "number"
        },
        "username": {
          "description": "The username for the password",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "password_branch": {
      "type": "object",
      "required": [
        "name",
        "id",
        "production",
        "access_host_url",
        "mysql_edge_address"
      ],
      "properties": {
        "access_host_url": {
          "description": "The host URL for the password",
          "type": "string"
        },
        "id": {
          "description": "The ID for the database branch",
          "type": "string"
        },
        "mysql_edge_address": {
          "description": "The address of the MySQL provider for the branch",
          "type": "string"
        },
        "name": {
          "description": "The name for the database branch",
          "type": "string"
        },
        "production": {
          "description": "Whether or not the database branch is a production database branch",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "password_with_plaintext": {
      "type": "object",
      "required": [
        "id",
        "name",
        "role",
        "created_at",
        "ttl_seconds",
        "access_host_url",
        "renewable",
        "database_branch",
        "integrations",
        "plain_text"
      ],
      "properties": {
        "access_host_url": {
          "description": "The host URL for the password",
          "type": "string"
        },
        "actor": {
          "$ref": "#/definitions/actor"
        },
        "created_at": {
          "description": "When the password was created",
          "type": "string"
        },
        "database_branch": {
          "$ref": "#/definitions/password_branch"
        },
        "deleted_at": {
          "description": "When the password was deleted",
          "type": "string"
        },
        "expires_at": {
          "description": "When the password will expire",
          "type": "string"
        },
        "id": {
          "description": "The ID for the password",
          "type": "string"
        },
        "integrations": {
          "description": "Integrations the password is associated with",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "The display name for the password",
          "type": "string"
        },
        "plain_text": {
          "description": "The plain text password",
          "type": "string"
        },
        "region": {
          "$ref": "#/definitions/region"
        },
        "renewable": {
          "description": "Whether or not the password can be renewed",
          "type": "boolean"
        },
        "role": {
          "description": "The role for the password",
          "type": "string"
        },
        "ttl_seconds": {
          "description": "Time to live (in seconds) for the password. The password will be invalid when TTL has passed",
          "type": "number"
        },
        "username": {
          "description": "The username for the password",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "queued_deploy_request": {
      "type": "object",
      "required": [
        "id",
        "auto_cutover",
        "created_at",
        "cutover_expiring",
        "state",
        "submitted_at",
        "updated_at"
      ],
      "properties": {
        "auto_cutover": {
          "description": "Whether or not to automatically cutover once deployment is finished",
          "type": "boolean"
        },
        "created_at": {
          "description": "When the deployment was created",
          "type": "string"
        },
        "cutover_at": {
          "description": "When the cutover for the deployment was initiated",
          "type": "string"
        },
        "cutover_expiring": {
          "description": "Whether or not the deployment cutover will expire soon and be cancelled",
          "type": "boolean"
        },
        "deploy_check_errors": {
          "description": "Deploy check errors for the deployment",
          "type": "string"
        },
        "finished_at": {
          "description": "When the deployment was finished",
          "type": "string"
        },
        "id": {
          "description": "The ID for a deployment",
          "type": "string"
        },
        "queued_at": {
          "description": "When the deployment was queued",
          "type": "string"
        },
        "ready_to_cutover_at": {
          "description": "When the deployment was ready for cutover",
          "type": "string"
        },
        "started_at": {
          "description": "When the deployment was started",
          "type": "string"
        },
        "state": {
          "description": "The state the deployment is in",
          "type": "string",
          "enum": [
            "pending",
            "ready",
            "no_changes",
            "queued",
            "submitting",
            "in_progress",
            "pending_cutover",
            "in_progress_vschema",
            "in_progress_cancel",
            "in_progress_cutover",
            "complete",
            "complete_cancel",
            "complete_error",
            "complete_pending_revert",
            "in_progress_revert",
            "complete_revert",
            "complete_revert_error",
            "cancelled",
            "error"
          ]
        },
        "submitted_at": {
          "description": "When the deployment was submitted",
          "type": "string"
        },
        "updated_at": {
          "description": "When the deployment was last updated",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "read_only_region": {
      "type": "object",
      "required": [
        "id",
        "created_at",
        "display_name",
        "ready_at",
        "updated_at",
        "ready",
        "actor",
        "region"
      ],
      "properties": {
        "actor": {
          "$ref": "#/definitions/actor"
        },
        "created_at": {
          "description": "When the read-only region was created",
          "type": "string"
        },
        "display_name": {
          "description": "The name of the read-only region",
          "type": "string"
        },
        "id": {
          "description": "The ID of the read-only region",
          "type": "string"
        },
        "ready": {
          "description": "Whether or not the read-only region is ready to serve queries",
          "type": "boolean"
        },
        "ready_at": {
          "description": "When the read-only region was ready to serve queries",
          "type": "string"
        },
        "region": {
          "$ref": "#/definitions/region"
        },
        "updated_at": {
          "description": "When the read-only region was last updated",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "region": {
      "type": "object",
      "required": [
        "id",
        "provider",
        "enabled",
        "public_ip_addresses",
        "display_name",
        "location",
        "slug"
      ],
      "properties": {
        "display_name": {
          "description": "Name of the region",
          "type": "string"
        },
        "enabled": {
          "description": "Whether or not the region is currently active",
          "type": "boolean"
        },
        "id": {
          "description": "The ID of the region",
          "type": "string"
        },
        "location": {
          "description": "Location of the region",
          "type": "string"
        },
        "provider": {
          "description": "Provider for the region (ex. AWS)",
          "type": "string"
        },
        "public_ip_addresses": {
          "description": "Public IP addresses for the region",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "slug": {
          "description": "The slug of the region",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "restored_from_branch": {
      "type": "object",
      "required": [
        "id",
        "name",
        "created_at",
        "updated_at",
        "deleted_at"
      ],
      "properties": {
        "created_at": {
          "description": "When the resource was created",
          "type": "string"
        },
        "deleted_at": {
          "description": "When the resource was deleted, if deleted",
          "type": "string"
        },
        "id": {
          "description": "The ID for the resource",
          "type": "string"
        },
        "name": {
          "description": "The name for the resource",
          "type": "string"
        },
        "updated_at": {
          "description": "When the resource was last updated",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "schema_snapshot": {
      "type": "object",
      "required": [
        "id",
        "url",
        "name",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "created_at": {
          "description": "When the schema snapshot was created",
          "type": "string"
        },
        "id": {
          "description": "The ID of the schema snapshot",
          "type": "string"
        },
        "name": {
          "description": "The name of the schema snapshot",
          "type": "string"
        },
        "updated_at": {
          "description": "When the schema snapshot was last updated",
          "type": "string"
        },
        "url": {
          "description": "The URL to the schema snapshot in the PlanetScale app",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "table_schema": {
      "type": "object",
      "required": [
        "name",
        "html",
        "raw"
      ],
      "properties": {
        "html": {
          "description": "Syntax highlighted HTML for the table's schema",
          "type": "string"
        },
        "name": {
          "description": "Name of the table",
          "type": "string"
        },
        "raw": {
          "description": "The table's schema",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "user": {
      "type": "object",
      "properties": {
        "avatar_url": {
          "description": "The URL source of the user's avatar",
          "type": "string"
        },
        "created_at": {
          "description": "When the user was created",
          "type": "string"
        },
        "default_organization_id": {
          "description": "The default organization for the user",
          "type": "string"
        },
        "directory_managed": {
          "description": "Whether or not the user is managed by a WorkOS directory",
          "type": "boolean"
        },
        "display_name": {
          "description": "The display name of the user",
          "type": "string"
        },
        "email": {
          "description": "The email of the user",
          "type": "string"
        },
        "email_verified": {
          "description": "Whether or not the user is verified by email",
          "type": "boolean"
        },
        "id": {
          "description": "The ID of the user",
          "type": "string"
        },
        "managed": {
          "description": "Whether or not the user is managed by an authentication provider",
          "type": "boolean"
        },
        "name": {
          "description": "The name of the user",
          "type": "string"
        },
        "sso": {
          "description": "Whether or not the user is managed by WorkOS",
          "type": "boolean"
        },
        "two_factor_auth_configured": {
          "description": "Whether or not the user has configured two factor authentication",
          "type": "boolean"
        },
        "updated_at": {
          "description": "When the user was last updated",
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  },
  "securityDefinitions": {
    "ApiKeyHeader": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "ApiKeyHeader": [
        "Authorization"
      ]
    }
  ],
  "tags": [
    {
      "description": "          API endpoints for managing database branch backups.\n",
      "name": "Backups"
    },
    {
      "description": "          API endpoints for managing databases within an organization.\n",
      "name": "Databases"
    },
    {
      "description": "          API endpoints for managing database branch passwords.\n",
      "name": "Database branch passwords"
    },
    {
      "description": "          API endpoints for fetching OAuth applications.\n",
      "name": "OAuth applications"
    },
    {
      "description": "          API endpoints for managing OAuth tokens.\n",
      "name": "OAuth tokens"
    },
    {
      "description": "          API endpoints for managing organizations.\n",
      "name": "Organizations"
    },
    {
      "description": "          API endpoints for fetching user information.\n",
      "name": "Users"
    },
    {
      "description": "            API endpoints for managing database deploy requests.\n",
      "name": "Deploy requests"
    }
  ],
  "x-readme": {
    "explorer-enabled": false
  }
}
